clear all; clc; Something
RelRough = [0 0.000005 0.000001 0.00001 0.00005 0.0001 0.0002...
    0.0004 0.0006 0.0008 0.001 0.002 0.004 0.006 0.008 0.01 0.05...
    0.02 0.03 0.04 0.05]; p = 1; ReL = 600 : 100 : 4000;
FCL = 64 ./ ReL;
for k = 1 : 1 : 5   %k is the values of the exponent in the *10
    for n = 1 : 1 : 9   %x is the values of the coefficient in front of the *10
        ReT(p) = n * (10 ^ (2 + k));
        p = p + 1;  %P is the counter assigned to continue loop and start a new value
    end
end
ReT = ReT(ReT>3000); ReT(43) = 10^8;

FCT_old = ones(1,length(ReT)); % The original value of FCT_guess
FCT_new = zeros(1,length(ReT)); %The original value of FCT_cal (so the while loop can start)
k = 0;  % the counter for the while loop that finds the value for FCT
FCT  = [];  % the original empty matrix of FCT
while abs(FCT_old - FCT_new) > (1E-14)
    for jj = 1 : length(RelRough)
        for ii = 1 : length(ReT)
            FCT_new(ii) = 1 / (-2 * log10((RelRough(jj) / 3.7) + 2.51 / (ReT(ii) * sqrt(FCT_old(ii))))^2);
        end
    end
    FCT_old = FCT_new;
    if k <= 30
        k = k + 1;
    else
        errorNotYetConverged.message = 'Error: The program failed to converge in the allowable number of iterations.';
        errorNotYetConverged.identifier = 'FCLT_jrico:NotConverged';
        error(errorNotYetConverged)
        return
    end
end

%{
for jj = 1 : length(RelRough) %jj is the value of RelRough used to determine the specific value of FCT
        for ii = 1 : length(ReT) %ii is the value of the specific value of ReT used to determine FCT 
            FCT_cal = 1 / (-2 * log10((RelRough(jj) / 3.7) + 2.51 / (ReT(ii) * sqrt(FCT_guess)))^2);
            while FCT_guess ~= FCT_cal && K < 30
                if abs(FCT_guess-FCT_cal) < (1E-14) %If the difference between the guessed and calculated values differ by less than this amount, stop the loop
                    FCT(jj) = FCT_cal;
                elseif K == 30  %if K is 30, break
                    warning('The program failed to converge in the allowable number of iterations')
                    break
                else
                    K = K + 1;      %increase the counter by 1, start again
                end
            end
        end
end
%}

disp('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^')  %display the table
disp('Friction Coefficient for Laminar Flow in pipes *1000')                        %title
disp('(Re < 4000)')                                                                 %subtitle
disp('--------------------------------------------------------------------------')
disp('Reynolds #        |   Friction Coefficient')                                  %column headings
for iii = 1:length(ReL)                                                             %defines number of columns
disp('--------------------------------------------------------------------------')
    fprintf('%-4.0f            2  |    %f \n', ReL(iii), 1000*FCL(iii));             %defines the values placed in each row
end

disp('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^')  %display the table
disp('Friction Coefficient for Turbulent Flow in pipes *1000')                      %title
disp('(Re >= 4000)')                                                                %subtitle
disp('--------------------------------------------------------------------------')
disp('Reynolds #        |   Friction Coefficient')                                  %column headings
for iiii = 1:length(ReT)                                                            %defines the number of columns
    disp('--------------------------------------------------------------------------')
    fprintf('%-4.0f             | %f | %f | %f | %f | %f | \n ',ReT(iiii),FCT(iiii))    %There will be five elements per page
end
